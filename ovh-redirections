#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
'''
First, install the latest release of Python wrapper: $ pip install ovh
'''
import sys
import os.path
import ovh
import yaml

config_file = '~/.config/ovh-redirections.yaml'
remote_db_suffix = '_remote-redirections.yaml'

def help():
    print('Usage: {} <command>\n\nCommands:'.format(sys.argv[0]))
    for f in globals().keys():
        if not f.startswith('__') and callable(globals()[f]):
            print('    {}'.format(f))
    sys.exit(1)

try:
    f_config = open(os.path.expanduser(config_file), 'r')
except:
    print('No config file found {}\n'.format(config_file))
    config = { 'example.com': { 'endpoint': 'ovh-eu', 'application_key': 'YourApplicationKey', 'application_secret': 'YourApplicationSecret', 'consumer_key': 'YourConsumerKey' } }
    print('Configuration sample:\n')
    print(yaml.dump(config, indent=4, default_flow_style=False))
    sys.exit(1)

configs = yaml.load(f_config)

if len(configs.keys()) == 1:
    domain = list(configs.keys())[0]
    print('Using "{}" domain configuration…'.format(domain))
    config = configs[domain]
    client = ovh.Client(
        endpoint=config['endpoint'],
        application_key=config['application_key'],
        application_secret=config['application_secret'],
        consumer_key=config['consumer_key'],
    )
else:
    print('Multi-domain support are not yet implemented…')
    sys.exit(1)
remote_db = '{}{}'.format(domain, remote_db_suffix)

def update():
    redirections_id_list = client.get('/email/domain/{}/redirection'.format(domain))
    redirections = []
    for r in redirections_id_list:
        redirection = client.get('/email/domain/{}/redirection/{}'.format(domain, r))
        redirections.append(redirection)
    f = open(remote_db, 'w')
    yaml.dump(redirections, f, indent=2)
    print('Redirections written to "{}"'.format(remote_db))

def _open_remote_db():
    try:
        f = open(remote_db, 'r')
    except Exception as e:
        print(str(e))
        print("Maybe you missed to run '{} update' before ?".format(sys.argv[0]))
        sys.exit(1)
    return f

def list():
    f = _open_remote_db()
    r_redirections = yaml.load(f)
    for r in r_redirections:
        print("{} -> {}".format(r['from'], r['to']))

def list_as_group():
    f = _open_remote_db()
    r_redirections = yaml.load(f)
    # Build a dict
    redirections_dict = {}
    for r in r_redirections:
        if r['from'] not in redirections_dict:
            redirections_dict[r['from']] = []
        redirections_dict[r['from']].append(r)
    # Print redirections (grouped)
    for key in redirections_dict.keys():
        if len(redirections_dict[key]) == 1:
            r = redirections_dict[key][0]
            #print("{} -> {}".format(r['from'], r['to']))
        else:
            print(key)
            for redirection in redirections_dict[key]:
                print('  %s (%s)' % (redirection['to'], redirection['id']))

if len(sys.argv) == 1:
    help()
else:
    if sys.argv[1] in locals():
        locals()[sys.argv[1]]()
    else:
        help()
